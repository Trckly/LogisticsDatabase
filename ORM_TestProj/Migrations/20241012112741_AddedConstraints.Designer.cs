// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ORM_TestProj.Context;

#nullable disable

namespace ORM_TestProj.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241012112741_AddedConstraints")]
    partial class AddedConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ORM_TestProj.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Settlement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.CargoOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("OrderId");

                    b.ToTable("CargoOrders");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DrivingLicenseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingLicenseId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.DrivingLicense", b =>
                {
                    b.Property<string>("DrivingLicenceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LicenseIssuer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("LicenseIssuingDate")
                        .HasColumnType("date");

                    b.HasKey("DrivingLicenceId");

                    b.ToTable("DrivingLicenses");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Logist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstName", "LastName", "Surname")
                        .IsUnique();

                    b.ToTable("Logists");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("CarrierCompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("CarrierPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("ClientCompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("ClientPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("LogistId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.OrderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInitialAddress")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CarryingCapacity")
                        .HasColumnType("double precision");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character(8)")
                        .IsFixedLength();

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.CargoOrder", b =>
                {
                    b.HasOne("ORM_TestProj.Entities.Cargo", "CargoNavigation")
                        .WithMany("CargoOrdersNavigation")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ORM_TestProj.Entities.Order", "OrderNavigation")
                        .WithMany("CargoOrderNavigation")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CargoNavigation");

                    b.Navigation("OrderNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Driver", b =>
                {
                    b.HasOne("ORM_TestProj.Entities.DrivingLicense", "DrivingLicenseNavigation")
                        .WithOne("DriverNavigation")
                        .HasForeignKey("ORM_TestProj.Entities.Driver", "DrivingLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingLicenseNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Order", b =>
                {
                    b.HasOne("ORM_TestProj.Entities.Driver", "DriverNavigation")
                        .WithMany("OrdersNavigation")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ORM_TestProj.Entities.Logist", "LogistNavigation")
                        .WithMany("OrdersNavigation")
                        .HasForeignKey("LogistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ORM_TestProj.Entities.Vehicle", "VehicleNavigation")
                        .WithMany("OrdersNavigation")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverNavigation");

                    b.Navigation("LogistNavigation");

                    b.Navigation("VehicleNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.OrderAddress", b =>
                {
                    b.HasOne("ORM_TestProj.Entities.Address", "AddressNavigation")
                        .WithMany("OrderAddressesNavigation")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ORM_TestProj.Entities.Order", "OrderNavigation")
                        .WithMany("OrderAddressesNavigation")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressNavigation");

                    b.Navigation("OrderNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Address", b =>
                {
                    b.Navigation("OrderAddressesNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Cargo", b =>
                {
                    b.Navigation("CargoOrdersNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Driver", b =>
                {
                    b.Navigation("OrdersNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.DrivingLicense", b =>
                {
                    b.Navigation("DriverNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Logist", b =>
                {
                    b.Navigation("OrdersNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Order", b =>
                {
                    b.Navigation("CargoOrderNavigation");

                    b.Navigation("OrderAddressesNavigation");
                });

            modelBuilder.Entity("ORM_TestProj.Entities.Vehicle", b =>
                {
                    b.Navigation("OrdersNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
